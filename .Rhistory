# layerId = ˜ID,
# label = paste("LayerID=", ID, sep="")
)
server <- function(input, output){
output$map1 <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(
data = data,
lng = ~Longtitude,
lat = ~Latitude
# layerId = ˜ID,
# label = paste("LayerID=", ID, sep="")
)
})
}
shinyApp(ui = ui, server = server)
leaflet() %>%
#addTiles() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(
data = data,
lng = ~Longtitude,
lat = ~Latitude
# layerId = ˜ID,
# label = paste("LayerID=", ID, sep="")
)
leaflet() %>%
#addTiles() %>%
#addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(
data = data,
lng = ~Longtitude,
lat = ~Latitude
# layerId = ˜ID,
# label = paste("LayerID=", ID, sep="")
)
#ui-----------
ui <- fluidPage(
titlePanel(title=div(img(src="http://cliparts.co/cliparts/dc9/KRR/dc9KRRLEi.png", height = 70), "Gambier Tree Simulator"), windowTitle = "Gambier Tree Simulator "),
tags$h4("This simulation is based on tree data gathered on Kenyon College grounds. You can change the number of trees and the average size of the trees to see the impact removing trees versus letting them grow has on the ecosystem. The display on the right shows a score for the benefit these trees have to the ecosystem"),
leafletOutput("map1", width= "100%", height = "100%")
)
library(ggplot2)
library(shiny)
library(leaflet)
library(mapviewyy)
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
quakes
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/Untitled.R')
library(sp)
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
data <- read.csv("/Users/wangzhaofang/Desktop/GundProject/GundGallery-DataVisualization/Tree_data.csv")
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/V2 test.R')
data.SP <- SpatialPointsDataFrame(data[, c(13,14)], data[, -c(13,14)])
#ui-----------
ui <- bootstrapPage(
tags$style(type = "text/css", "html,
body {width:100%;height:100%}"),
titlePanel(title=div(img(src="http://cliparts.co/cliparts/dc9/KRR/dc9KRRLEi.png", height = 70), "Gambier Tree Simulator"), windowTitle = "Gambier Tree Simulator "),
tags$h4("This simulation is based on tree data gathered on Kenyon College grounds. You can change the number of trees and the average size of the trees to see the impact removing trees versus letting them grow has on the ecosystem. The display on the right shows a score for the benefit these trees have to the ecosystem"),
leafletOutput("map1", width= "50%", height = "50%")
)
server <- function(input, output, session){
# output$map1 <- renderLeaflet({
#   leaflet(data = data) %>%
#     addTiles() %>%
#     addCircleMarkers(
#       lng = ~Longtitude,
#       lat = ~Latitude
#       # label = paste("LayerID=", ID, sep="")
#     )
# })
output$map1 <- renderLeaflet({
leaflet(data = data) %>%
addTiles() %>%
addCircleMarkers(
lng = ~long,
lat = ~lat
)
})
}
shinyApp(ui = ui, server = server)
m <- leaflet() %>%
addTiles() %>%
m
library(ggplot2)
library(shiny)
library(leaflet)
library(sp)
data <- read.csv("/Users/wangzhaofang/Desktop/GundProject/GundGallery-DataVisualization/Tree_data.csv")
data.SP <- SpatialPointsDataFrame(data[, c(13,14)], data[, -c(13,14)])
m <- leaflet() %>%
addTiles() %>%
m
m <- leaflet() %>%
addTiles() %>%
m
m <- leaflet() %>%
addTiles()
m
runApp('~/Desktop/V2 test.R')
addCircleMarkers(
data = data,
lng = ~long,
lat = ~lat
)
m <- leaflet() %>%
addTiles()
addCircleMarkers(
data = data,
lng = ~long,
lat = ~lat
)
m
m <- leaflet() %>%
addTiles()
addCircleMarkers(
data = data,
lng = ~long,
lat = ~lat
)
addMarkers(
data = data,
lng = ~long,
lat = ~lat
)
m
m <- leaflet() %>%
addTiles()
addMarkers(
data = data.SP,
lng = ~long,
lat = ~lat
)
m
m <- leaflet() %>%
addTiles() %>%
addMarkers(
data = data,
lng = ~long,
lat = ~lat
)
m
data$long <- as.numeric(data$long)
data$lat <- as.numeric(data$lat)
data.SP <- SpatialPointsDataFrame(data[, c(13,14)], data[, -c(13,14)])
m <- leaflet() %>%
addTiles() %>%
addMarkers(
data = data,
lng = ~long,
lat = ~lat
)
m
data$long <- as.numeric(data$long)
data$lat <- as.numeric(data$lat)
data.SP <- SpatialPointsDataFrame(data[, c(13,14)], data[, -c(13,14)])
m <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(
data = data,
lng = ~long,
lat = ~lat
)
m
runApp('~/Desktop/V2 test.R')
names(providers)
m <- leaflet() %>%
addProviderTiles(providers$OpenWeatherMap.Rain) %>%
addMarkers(
data = data,
lng = ~long,
lat = ~lat
)
m
runApp('~/Desktop/V2 test.R')
runApp('~/Desktop/V2 test.R')
EFdata <- read.csv("/Users/wangzhaofang/Downloads/usa_000006.csv")
EFdata <- read.csv("/Users/wangzhaofang/Downloads/usa_00006.csv")
View(EFdata)
EFdata <- select(EFdata, -COUNTYIP)
library(dplyr)
EFdata <- select(EFdata, -COUNTYIP)
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
server <- function(input, output, session){
# output$map1 <- renderLeaflet({
#   leaflet(data = data) %>%
#     addTiles() %>%
#     addCircleMarkers(
#       lng = ~Longtitude,
#       lat = ~Latitude
#       # label = paste("LayerID=", ID, sep="")
#     )
# })
output$map1 <- renderLeaflet({
leaflet(data = data) %>%
addProviderTiles(providers$OpenStreetMap) %>%
addCircleMarkers(
data = data,
lng = ~long,
lat = ~lat
)
})
observe(
leafletProxy("map1") %>%
removeMarker(input$map1_marker_click$id)
)
}
shinyApp(ui = ui, server = server)
runApp('V2_test.R')
View(data)
runApp('V2_test.R')
runApp('V2_test.R')
runApp('~/Desktop/Untitled.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('~/Desktop/Untitled.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
library(readr)
EF_Final <- read_csv("~/Desktop/EF/EF Final.csv")
View(EF_Final)
runApp('V2_test.R')
install.packages("plm")
library(plm)
install.packages("plm")
install.packages("lmtest")
Y <- cbind(EF_Final$div)
X <- cbind(multgen, nchild, female, white, black, asian, rural, age1825,
age2640, age4155, HSdropout, HS, collegep, data = EF_Final)
attach(EF_Final)
X <- cbind(multgen, nchild, female, white, black, asian, rural, age1825,
age2640, age4155, HSdropout, HS, collegep)
Y <- cbind(EF_Final)
X <- cbind(multgen, nchild, female, white, black, asian, rural, age1825,
age2640, age4155, HSdropout, HS, collegep)
View(X)
summary(X)
summary(Y)
Y <- cbind(div)
X <- cbind(multgen, nchild, female, white, black, asian, rural, age1825,
age2640, age4155, HSdropout, HS, collegep)
summary(X)
summary(Y)
library(psych)
describe(X)
describe(Y)
sd(X)
sd(multgen)
summary(X)
summary(Y)
sd(multgen)
X <- cbind(multgen, nchild, female, white, black, asian, rural, age1825,
age2640, age4155, HSdropout, HS, collegep, unemployment)
summary(X)
summary(Y)
sd(unemployment)
sd(div)
summary(white)
sd(white)
summary(black)
sd(black)
summary(multgen)
sd(multgen)
summary(nchild)
sd(nchild)
summary(rural)
sd(rural)
summary(female)
sd(female)
summary(age1825)
sd(age1825)
summary(age2640)
sd(age2640)
summary(age4155)
sd(age4155)
summary(HSdropout)
sd(HSdropout)
summary(hs)
summary(HS)
sd(HS)
summary(collegep)
sd(collegep)
summary(asian)
sd(asian)
install.packages("doBy")
runApp('V2_test.R')
totalB = 462.84
totalB <- 462.84
accessData <- data.frame(data)
accessData <- data.frame(data[,])
data <- read.csv("/Users/wangzhaofang/Desktop/GundProject/GundGallery-DataVisualization/Tree_data.csv")
View(data)
accessData <- data.frame(data[,c(1:14)])
View(accessData)
accessData <- data.frame(data[,c(1,5,9,11,12)])
View(accessData)
accessData[3,]
accessData[3,3]
library(shiny); runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
library(shiny); runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp('V2_test.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,13)])
View(accessData)
data <- read.csv("Tree_data.csv")
#Creates data frame for latitude and longitude
data.SP <- SpatialPointsDataFrame(data[, c(13,14)], data[, -c(13,14)])
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,13)])
View(accessData)
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,15)])
runApp()
runApp()
runApp()
runApp()
runApp()
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,15)])
accessData[114, 6] <<- 1
accessData[114, 6] <- 1
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,15)])
accessData[114, 6] <- 1
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,15)])
View(accessData)
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,15)])
accessData[114, 6] <- 1
(accessData[114, 6])
View(accessData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(accessData[3,3])
(accessData[3,6])
(accessData[114,6])
runApp()
(accessData[114,6])
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,15)])
(accessData[114,6])
runApp()
(accessData[114,6])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(accessData[114, 6])
runApp()
(accessData[114, 6])
runApp()
(accessData[125, 6])
(accessData[114, 6])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('shinyapp.R')
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(data)
View(data)
data <- read.csv("Tree_data.csv")
View(data)
#Creates a data frame which holds
#ID, Total Benefit ($), Runoff Avoided (gal), Particulate Matter Removed (oz), Lifetime CO2 equivalent of carbon stored (lbs)
#for each tree
accessData <- data.frame(data[,c(1,5,7,11,12,15)])
runApp()
